library(tidyverse)
library(caret)
data <- read.csv("database.csv")
library(hms)
data <- data %>%
mutate(Date = as.Date(Date, format = "%m/%d/%Y"),
Time = as.hms(as.character(Time, format = "%H:%M:%S")),
ID = as.character(ID))
## TRAIN TEST SPLIT ##
index <- createDataPartition(data$Magnitude, p = 0.8,
list = FALSE)
trainData <- data[index, ]
testData  <- data[-index, ]
## MISSINGS FOR TRAIN DATA ##
# drop columns with almost no data
trainData <- trainData %>%
select(-Magnitude.Error, -Horizontal.Error)
# select numerics for imputation
toImpute <- trainData %>%
select_if(is.numeric)
# get the rest of the variables
trainData <- trainData %>%
select_if(negate(is.numeric))
# impute missings using MICE
library(mice)
imputed <- mice(toImpute, method = "norm.boot")
imputed <- complete(imputed)
# recombine dataset
fullTrainData <- cbind(imputed, trainData)
set.seed(123)
# check that it worked
sum(is.na(fullTrainData))
library(corrplot)
corrData <- fullTrainData %>%
select_if(is.numeric) %>%
as.matrix() %>%
cor()
corrplot.mixed(corrData,
tl.col = "black",
order = "hclust",
tl.cex = 0.8)
corrplot.mixed(corrData,
tl.col = "black",
order = "hclust",
tl.cex = 0.5)
corrplot.mixed(corrData,
tl.col = "black",
order = "hclust",
tl.cex = 0.5,
tl.srt = 70)
corrplot.mixed(corrData,
tl.col = "black",
tl.cex = 0.5,
tl.srt = 70)
corrplot.mixed(corrData,
tl.col = "black",
tl.cex = 0.3)
corrplot(corrData,
tl.col = "black",
order = "hclust",
tl.cex = 0.5,
tl.srt = 70)
corrplot(corrData,
tl.col = "black",
order = "hclust",
tl.cex = 0.8,
tl.srt = 70)
names(fullTrainData)
library(glmnet)
X <- model.matrix(Magnitude ~ ., fullData)[, -1]
Y <- fullData$Magnitude
lasso <- cv.glmnet(
x = X,
y = Y,
alpha = 1
)
X <- model.matrix(Magnitude ~ ., fullTrainData)[, -1]
Y <- fullTrainData$Magnitude
setwd("~/Desktop/Hertie/1. Fall 2019/Machine Learning/MLProject/data")
load("~/Desktop/Hertie/1. Fall 2019/Machine Learning/MLProject/data/full_prepped_data.RData")
X <- prepped_data %>%
select(-id, -avg_age_per_job, -hours_worked_week,
-industry, -full_time, -hourly_pay_centered)
X <- model.matrix(job_satisfaction ~ ., X)[, -1]
X
X2 <- model.matrix(Magnitude ~ ., fullTrainData)[, -1]
X2
oneHot <- dummyVars(" ~ .", data = fullTrainData)
oneHot
oneHot <- data.frame(dummyVars(" ~ .", data = fullTrainData))
oneHot <- one_hot(as.data.table(fullTrainData))
library(mltools)
install.packages("mltools")
library(mltools)
oneHot <- one_hot(as.data.table(fullTrainData))
oneHot <- one_hot(fullTrainData)
library(data.table)
oneHot <- one_hot(as.data.table(fullTrainData))
oneHot
View(oneHot)
X2<- model.matrix(Magnitude ~ ., oneHot)[, -1]
Y <- fullTrainData$Magnitude
lasso <- cv.glmnet(
x = X2,
y = Y,
alpha = 1
)
Y <- oneHot$Magnitude
lasso <- cv.glmnet(
x = X2,
y = Y,
alpha = 1
)
X <- model.matrix(Magnitude ~ ., oneHot)[, -1]
Y <- oneHot$Magnitude
lasso <- cv.glmnet(
x = X,
y = Y,
alpha = 1
)
sum(is.na(X))
sum(is.na(Y))
Y <- X$Magnitude
X <- matrix(oneHot)
Y <- oneHot$Magnitude
lasso <- cv.glmnet(
x = X,
y = Y,
alpha = 1
)
X <- as.matrix(oneHot)
lasso <- cv.glmnet(
x = X,
y = Y,
alpha = 1
)
X <- model.matrix(Magnitude ~ ., oneHot)[, -1]
Y <- oneHot$Magnitude
X <- oneHot %>%
select(-Magnitude) %>%
as.matrix()
Y <- oneHot$Magnitude
lasso <- cv.glmnet(
x = X,
y = Y,
alpha = 1
)
X <- Matrix(X, sparse = TRUE)
X
oneHot <- one_hot(as.data.table(fullTrainData))
X <- oneHot %>%
select(-Magnitude)
View(X)
str(X)
X <- oneHot %>%
select(-Magnitude) %>%
as.numeric()
X <- oneHot %>%
select(-Magnitude, -Date, -Time, -chr)
X <- oneHot %>%
select(-Magnitude, -Date, -Time, -ID)
X <- Matrix(X, sparse = TRUE)
X <- as.matrix(X, sparse = TRUE)
X <- oneHot %>%
select(-Magnitude, -Date, -Time, -ID) %>%
matrix()
Y <- oneHot$Magnitude
lasso <- cv.glmnet(
x = X,
y = Y,
alpha = 1
)
X <- oneHot %>%
select(-Magnitude, -Date, -Time, -ID) %>%
as.matrix()
lasso <- cv.glmnet(
x = X,
y = Y,
alpha = 1
)
library(coefplot)
extract.coef(lasso, lambda = "lambda.1se")
plot(lasso, xvar = "lambda")
plot_coeff_evolution = function(regularization, type = 'Lasso')
{
require(ggplot2)
lambda = regularization$lambda
coeff = as.matrix(regularization$beta)
rowName = rownames(coeff)
coeff = data.table(coeff)
coeff[ ,name:=rowName]
coeff = melt(coeff, id.vars = 'name')
coeff[ ,variable:=rep(lambda, each = length(unique(name)))]
ggplot(coeff, aes(x = variable, y = value, color = name)) +
geom_line() +
xlab('Value of lambda') +
ylab('Value of coefficient') +
scale_x_log10() +
geom_vline(xintercept = lasso$lambda.1se, linetype = "longdash") +
geom_vline(xintercept = lasso$lambda.min, linetype = "longdash") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"))
}
plot_coeff_evolution(lasso, "Lasso")
plot_coeff_evolution = function(regularization, type = 'Lasso'){
require(ggplot2)
lambda = regularization$lambda
coeff = as.matrix(regularization$beta)
rowName = rownames(coeff)
coeff = data.table(coeff)
coeff[ ,name:=rowName]
coeff = melt(coeff, id.vars = 'name')
coeff[ ,variable:=rep(lambda, each = length(unique(name)))]
ggplot(coeff, aes(x = variable, y = value, color = name)) +
geom_line() +
xlab('Value of lambda') +
ylab('Value of coefficient') +
scale_x_log10() +
geom_vline(xintercept = lasso$lambda.1se, linetype = "longdash") +
geom_vline(xintercept = lasso$lambda.min, linetype = "longdash") +
theme(axis.text = element_text(size = 14),
axis.title = element_text(size = 14, face = "bold"))
}
plot_coeff_evolution(lasso, "Lasso")
is.na(lasso)
sum(is.na(lasso))
plot_coeff_evolution(lasso, "Lasso")
plot_coeff_evolution(lasso, "Lasso")
lasso
X2 <- prepped_data %>%
select(-id, -avg_age_per_job, -hours_worked_week,
-industry, -full_time, -hourly_pay_centered)
X2 <- model.matrix(job_satisfaction ~ ., X)[, -1]
Y2 <- prepped_data$job_satisfaction
rm(prepped_data)
load("~/Desktop/Hertie/1. Fall 2019/Machine Learning/MLProject/data/full_prepped_data.RData")
X2 <- prepped_data %>%
select(-id, -avg_age_per_job, -hours_worked_week,
-industry, -full_time, -hourly_pay_centered)
X2 <- model.matrix(job_satisfaction ~ ., X)[, -1]
Y2 <- prepped_data$job_satisfaction
X2 <- prepped_data %>%
select(-id, -avg_age_per_job, -hours_worked_week,
-industry, -full_time, -hourly_pay_centered)
X2 <- model.matrix(job_satisfaction ~ ., X2)[, -1]
Y2 <- prepped_data$job_satisfaction
lasso_cv <- cv.glmnet(
x = X,
y = Y,
alpha = 1)
library(coefplot)
extract.coef(lasso_cv, lambda = "lambda.1se")
rm(lasso_cv)
lasso_cv <- cv.glmnet(
x = X2,
y = Y2,
alpha = 1)
extract.coef(lasso_cv, lambda = "lambda.1se")
lasso_cv
plot_coeff_evolution = function(regularization, type = 'Lasso')
{
require(ggplot2)
lambda = regularization$lambda
coeff = as.matrix(regularization$beta)
rowName = rownames(coeff)
coeff = data.table(coeff)
coeff[ ,name:=rowName]
coeff = melt(coeff, id.vars = 'name')
coeff[ ,variable:=rep(lambda, each = length(unique(name)))]
ggplot(coeff, aes(x = variable, y = value, color = name)) +
geom_line() +
xlab('Value of lambda') +
ylab('Value of coefficient') +
scale_x_log10() +
geom_vline(xintercept = lasso_cv$lambda.1se, linetype = "longdash") +
geom_vline(xintercept = lasso_cv$lambda.min, linetype = "longdash") +
theme(axis.text=element_text(size=14), axis.title=element_text(size=14,face="bold"))
}
plot_coeff_evolution(lasso, "Lasso")
plot_coeff_evolution = function(regularization, type = 'Lasso')
{
require(ggplot2)
lambda = regularization$lambda
coeff = as.matrix(regularization$beta)
rowName = rownames(coeff)
coeff = data.table(coeff)
coeff[ ,name:=rowName]
coeff = melt(coeff, id.vars = 'name')
coeff[ ,variable:=rep(lambda, each = length(unique(name)))]
ggplot(coeff, aes(x = variable, y = value, color = name)) +
geom_line() +
xlab('Value of lambda') +
ylab('Value of coefficient') +
scale_x_log10() +
geom_vline(xintercept = lasso_cv$lambda.1se, linetype = "longdash") +
geom_vline(xintercept = lasso_cv$lambda.min, linetype = "longdash") +
theme(axis.text=element_text(size=14), axis.title=element_text(size=14,face="bold"))
}
plot_coeff_evolution(lasso_cv, "Lasso")
lasso
